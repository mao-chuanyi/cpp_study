// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signin.proto

#include "signin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ReqSignin::ReqSignin(
    ::_pbi::ConstantInitialized)
  : username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , encodedpassword_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ReqSigninDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSigninDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSigninDefaultTypeInternal() {}
  union {
    ReqSignin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSigninDefaultTypeInternal _ReqSignin_default_instance_;
PROTOBUF_CONSTEXPR RespSignin::RespSignin(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , code_(0){}
struct RespSigninDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RespSigninDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RespSigninDefaultTypeInternal() {}
  union {
    RespSignin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RespSigninDefaultTypeInternal _RespSignin_default_instance_;
static ::_pb::Metadata file_level_metadata_signin_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_signin_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_signin_2eproto = nullptr;

const uint32_t TableStruct_signin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSignin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSignin, username_),
  PROTOBUF_FIELD_OFFSET(::ReqSignin, encodedpassword_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RespSignin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RespSignin, code_),
  PROTOBUF_FIELD_OFFSET(::RespSignin, message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ReqSignin)},
  { 8, -1, -1, sizeof(::RespSignin)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ReqSignin_default_instance_._instance,
  &::_RespSignin_default_instance_._instance,
};

const char descriptor_table_protodef_signin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014signin.proto\"6\n\tReqSignin\022\020\n\010username\030"
  "\001 \001(\t\022\027\n\017encodedPassword\030\002 \001(\t\"+\n\nRespSi"
  "gnin\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t28\n\021U"
  "serSigninService\022#\n\006Signin\022\n.ReqSignin\032\013"
  ".RespSignin\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_signin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_signin_2eproto = {
    false, false, 181, descriptor_table_protodef_signin_2eproto,
    "signin.proto",
    &descriptor_table_signin_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_signin_2eproto::offsets,
    file_level_metadata_signin_2eproto, file_level_enum_descriptors_signin_2eproto,
    file_level_service_descriptors_signin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_signin_2eproto_getter() {
  return &descriptor_table_signin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_signin_2eproto(&descriptor_table_signin_2eproto);

// ===================================================================

class ReqSignin::_Internal {
 public:
};

ReqSignin::ReqSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSignin)
}
ReqSignin::ReqSignin(const ReqSignin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(from._internal_username(), 
      GetArenaForAllocation());
  }
  encodedpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encodedpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encodedpassword().empty()) {
    encodedpassword_.Set(from._internal_encodedpassword(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ReqSignin)
}

inline void ReqSignin::SharedCtor() {
username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encodedpassword_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encodedpassword_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqSignin::~ReqSignin() {
  // @@protoc_insertion_point(destructor:ReqSignin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSignin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.Destroy();
  encodedpassword_.Destroy();
}

void ReqSignin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSignin::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSignin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  encodedpassword_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSignin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSignin.username"));
        } else
          goto handle_unusual;
        continue;
      // string encodedPassword = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encodedpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSignin.encodedPassword"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSignin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSignin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSignin.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string encodedPassword = 2;
  if (!this->_internal_encodedpassword().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encodedpassword().data(), static_cast<int>(this->_internal_encodedpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSignin.encodedPassword");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encodedpassword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSignin)
  return target;
}

size_t ReqSignin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSignin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string encodedPassword = 2;
  if (!this->_internal_encodedpassword().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encodedpassword());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSignin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSignin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSignin::GetClassData() const { return &_class_data_; }

void ReqSignin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSignin *>(to)->MergeFrom(
      static_cast<const ReqSignin &>(from));
}


void ReqSignin::MergeFrom(const ReqSignin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSignin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_encodedpassword().empty()) {
    _internal_set_encodedpassword(from._internal_encodedpassword());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSignin::CopyFrom(const ReqSignin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSignin::IsInitialized() const {
  return true;
}

void ReqSignin::InternalSwap(ReqSignin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &encodedpassword_, lhs_arena,
      &other->encodedpassword_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSignin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_signin_2eproto_getter, &descriptor_table_signin_2eproto_once,
      file_level_metadata_signin_2eproto[0]);
}

// ===================================================================

class RespSignin::_Internal {
 public:
};

RespSignin::RespSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:RespSignin)
}
RespSignin::RespSignin(const RespSignin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:RespSignin)
}

inline void RespSignin::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

RespSignin::~RespSignin() {
  // @@protoc_insertion_point(destructor:RespSignin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RespSignin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void RespSignin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespSignin::Clear() {
// @@protoc_insertion_point(message_clear_start:RespSignin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespSignin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RespSignin.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespSignin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RespSignin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RespSignin.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RespSignin)
  return target;
}

size_t RespSignin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RespSignin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespSignin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespSignin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespSignin::GetClassData() const { return &_class_data_; }

void RespSignin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespSignin *>(to)->MergeFrom(
      static_cast<const RespSignin &>(from));
}


void RespSignin::MergeFrom(const RespSignin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RespSignin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespSignin::CopyFrom(const RespSignin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RespSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespSignin::IsInitialized() const {
  return true;
}

void RespSignin::InternalSwap(RespSignin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RespSignin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_signin_2eproto_getter, &descriptor_table_signin_2eproto_once,
      file_level_metadata_signin_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ReqSignin*
Arena::CreateMaybeMessage< ::ReqSignin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSignin >(arena);
}
template<> PROTOBUF_NOINLINE ::RespSignin*
Arena::CreateMaybeMessage< ::RespSignin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RespSignin >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
