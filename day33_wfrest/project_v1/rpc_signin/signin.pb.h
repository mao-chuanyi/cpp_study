// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_signin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_signin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_signin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_signin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_signin_2eproto;
class ReqSignin;
struct ReqSigninDefaultTypeInternal;
extern ReqSigninDefaultTypeInternal _ReqSignin_default_instance_;
class RespSignin;
struct RespSigninDefaultTypeInternal;
extern RespSigninDefaultTypeInternal _RespSignin_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ReqSignin* Arena::CreateMaybeMessage<::ReqSignin>(Arena*);
template<> ::RespSignin* Arena::CreateMaybeMessage<::RespSignin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ReqSignin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSignin) */ {
 public:
  inline ReqSignin() : ReqSignin(nullptr) {}
  ~ReqSignin() override;
  explicit PROTOBUF_CONSTEXPR ReqSignin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSignin(const ReqSignin& from);
  ReqSignin(ReqSignin&& from) noexcept
    : ReqSignin() {
    *this = ::std::move(from);
  }

  inline ReqSignin& operator=(const ReqSignin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSignin& operator=(ReqSignin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSignin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSignin* internal_default_instance() {
    return reinterpret_cast<const ReqSignin*>(
               &_ReqSignin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqSignin& a, ReqSignin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSignin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSignin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSignin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSignin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSignin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSignin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSignin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSignin";
  }
  protected:
  explicit ReqSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kEncodedPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string encodedPassword = 2;
  void clear_encodedpassword();
  const std::string& encodedpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encodedpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encodedpassword();
  PROTOBUF_NODISCARD std::string* release_encodedpassword();
  void set_allocated_encodedpassword(std::string* encodedpassword);
  private:
  const std::string& _internal_encodedpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encodedpassword(const std::string& value);
  std::string* _internal_mutable_encodedpassword();
  public:

  // @@protoc_insertion_point(class_scope:ReqSignin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encodedpassword_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signin_2eproto;
};
// -------------------------------------------------------------------

class RespSignin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RespSignin) */ {
 public:
  inline RespSignin() : RespSignin(nullptr) {}
  ~RespSignin() override;
  explicit PROTOBUF_CONSTEXPR RespSignin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespSignin(const RespSignin& from);
  RespSignin(RespSignin&& from) noexcept
    : RespSignin() {
    *this = ::std::move(from);
  }

  inline RespSignin& operator=(const RespSignin& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespSignin& operator=(RespSignin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespSignin& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespSignin* internal_default_instance() {
    return reinterpret_cast<const RespSignin*>(
               &_RespSignin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RespSignin& a, RespSignin& b) {
    a.Swap(&b);
  }
  inline void Swap(RespSignin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespSignin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespSignin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespSignin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespSignin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespSignin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespSignin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RespSignin";
  }
  protected:
  explicit RespSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RespSignin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqSignin

// string username = 1;
inline void ReqSignin::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ReqSignin::username() const {
  // @@protoc_insertion_point(field_get:ReqSignin.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSignin::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqSignin.username)
}
inline std::string* ReqSignin::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:ReqSignin.username)
  return _s;
}
inline const std::string& ReqSignin::_internal_username() const {
  return username_.Get();
}
inline void ReqSignin::_internal_set_username(const std::string& value) {
  
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqSignin::_internal_mutable_username() {
  
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqSignin::release_username() {
  // @@protoc_insertion_point(field_release:ReqSignin.username)
  return username_.Release();
}
inline void ReqSignin::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqSignin.username)
}

// string encodedPassword = 2;
inline void ReqSignin::clear_encodedpassword() {
  encodedpassword_.ClearToEmpty();
}
inline const std::string& ReqSignin::encodedpassword() const {
  // @@protoc_insertion_point(field_get:ReqSignin.encodedPassword)
  return _internal_encodedpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSignin::set_encodedpassword(ArgT0&& arg0, ArgT... args) {
 
 encodedpassword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqSignin.encodedPassword)
}
inline std::string* ReqSignin::mutable_encodedpassword() {
  std::string* _s = _internal_mutable_encodedpassword();
  // @@protoc_insertion_point(field_mutable:ReqSignin.encodedPassword)
  return _s;
}
inline const std::string& ReqSignin::_internal_encodedpassword() const {
  return encodedpassword_.Get();
}
inline void ReqSignin::_internal_set_encodedpassword(const std::string& value) {
  
  encodedpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqSignin::_internal_mutable_encodedpassword() {
  
  return encodedpassword_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqSignin::release_encodedpassword() {
  // @@protoc_insertion_point(field_release:ReqSignin.encodedPassword)
  return encodedpassword_.Release();
}
inline void ReqSignin::set_allocated_encodedpassword(std::string* encodedpassword) {
  if (encodedpassword != nullptr) {
    
  } else {
    
  }
  encodedpassword_.SetAllocated(encodedpassword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encodedpassword_.IsDefault()) {
    encodedpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqSignin.encodedPassword)
}

// -------------------------------------------------------------------

// RespSignin

// int32 code = 1;
inline void RespSignin::clear_code() {
  code_ = 0;
}
inline int32_t RespSignin::_internal_code() const {
  return code_;
}
inline int32_t RespSignin::code() const {
  // @@protoc_insertion_point(field_get:RespSignin.code)
  return _internal_code();
}
inline void RespSignin::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void RespSignin::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:RespSignin.code)
}

// string message = 2;
inline void RespSignin::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& RespSignin::message() const {
  // @@protoc_insertion_point(field_get:RespSignin.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespSignin::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RespSignin.message)
}
inline std::string* RespSignin::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:RespSignin.message)
  return _s;
}
inline const std::string& RespSignin::_internal_message() const {
  return message_.Get();
}
inline void RespSignin::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* RespSignin::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* RespSignin::release_message() {
  // @@protoc_insertion_point(field_release:RespSignin.message)
  return message_.Release();
}
inline void RespSignin::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RespSignin.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_signin_2eproto
